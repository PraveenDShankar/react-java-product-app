name: Node.js CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'  # Specify the node version

    - name: Install dependencies
      run: npm install

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
          java-version: '17' 
          distribution: 'adopt'
    
    - name: Build Java project
      run: |
          cd backend  
          ./mvnw clean package -DskipTests  

    - name: Build Docker image for Java
      run: |
          cd backend  
          docker build -t praveendshankar0502/javareact-app:latest .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Java Docker image
      run: |
          docker push praveendshankar0502/javareact-app:latest
    - name: Build React project
      run: |
          cd frontend  # Change to your React app directory
          npm install
          npm run build

    - name: Build Docker image for React
      run: |
          cd react-app  # Change to your React app
          docker build -t praveendshankar0502/react-app:latest .

    - name: Push React Docker image
      run: |
          docker push praveendshankar0502/react-app:latest

    - name: Deploy to EC2
      env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
          IMAGE_TAG: ${{ secrets.DOCKER_IMAGE_TAG }}
      run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $USER@$HOST << 'EOF'
            docker pull $IMAGE_NAME:$IMAGE_TAG
            docker stop my_container || true
            docker rm my_container || true
            docker run -d --name my_container -p 3000:80 $IMAGE_NAME:$IMAGE_TAG
          EOF
